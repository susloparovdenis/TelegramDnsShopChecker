<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telebot</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
            <code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Indicates that collection or enumerable value does not contain null elements.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Indicates that collection or enumerable value can contain null elements.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.StringFormatMethodAttribute"/> class. 
            The string format method attribute.
            </summary>
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
            <code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
            Indicates that the method is contained in a type that implements
            <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
            is used to notify that some property value changed.
            </summary>
            <remarks>
            The method should be non-static and conform to one of the supported signatures:
            <list>
            <item>
            <c>NotifyChanged(string)</c>
            </item>
            <item>
            <c>NotifyChanged(params string[])</c>
            </item>
            <item>
            <c>NotifyChanged{T}(Expression{Func{T}})</c>
            </item>
            <item>
            <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
            </item>
            <item>
            <c>SetProperty{T}(ref T, T, string)</c>
            </item>
            </list>
            </remarks>
            <example>
            <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
            Examples of generated notifications:
            <list>
            <item>
            <c>NotifyChanged("Property")</c>
            </item>
            <item>
            <c>NotifyChanged(() =&gt; Property)</c>
            </item>
            <item>
            <c>NotifyChanged((VM x) =&gt; x.Property)</c>
            </item>
            <item>
            <c>SetProperty(ref myField, value, "Property")</c>
            </item>
            </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br />
            <c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples>
            <list>
            <item>
            <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
            </item>
            <item>
            <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
            </item>
            <item>
            <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
            </item>
            <item>
            <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
            </item>
            <item>
            <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
            </item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
            <code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
            >
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
            <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method invocation affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attibute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:Taikandi.Telebot.ServiceUnavailableException">
            <summary>
            Represents errors that occur when Telegram API servers are not available.
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Taikandi.Telebot.Telebot"/> class.
            </summary>
            <param name="apiKey">
            Telegram API key.
            </param>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.ForwardMessageAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forwards message of any kind.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="fromChatId">
            Unique identifier for the chat where the original message was sent, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="messageId">
            Unique message identifier
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.GetMeAsync">
            <summary>
            A simple method for testing your bot's auth token. Requires no parameters.
            Returns basic information about the bot in form of a User object.
            </summary>
            <returns>Basic information about the bot in form of a User object.</returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.GetUpdatesAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Use this method to receive incoming updates using long polling.
            <para>
            Note: In order to avoid getting duplicate updates, recalculate offset after each server response.
            </para>
            </summary>
            <param name="offset">
            Identifier of the first update to be returned. Must be greater by one than the highest among
            the identifiers of previously received updates. By default, updates starting with the earliest
            unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is
            called with an offset higher than its update_id.
            </param>
            <param name="limit">
            Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100.
            </param>
            <param name="timeout">
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            An Array of Update objects.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.GetUserProfillePhotos(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a list of profile pictures for a user.
            </summary>
            <param name="userId">
            Unique identifier of the target user.
            </param>
            <param name="offset">
            Sequential number of the first photo to be returned. By default, all photos are returned.
            </param>
            <param name="limit">
            Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.UserProfilePhotos"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendAudioAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends an audio file to be displayed as a playable voice message on Telegram clients.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="audioId">
            Id of an audio file that is already on the Telegram servers.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be
            sent as <see cref="T:Taikandi.Telebot.Types.Document"/>). Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendAudioAsync(System.Int32,System.IO.Stream,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends an audio file to be displayed as a playable voice message on Telegram clients.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="audioStream">
            A <see cref="T:System.IO.Stream"/> to the audio file to send.
            </param>
            <param name="fileName">
            A name for the file to be sent using <paramref name="audioStream"/>.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be
            sent as <see cref="T:Taikandi.Telebot.Types.Document"/>). Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendAudioFromFileAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends an audio file to be displayed as a playable voice message on Telegram clients.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="filePath">
            Fully qualified path to the audio file.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be
            sent as <see cref="T:Taikandi.Telebot.Types.Document"/>). Bots can currently send audio files of up to 50 MB in size,
            this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendChatAction(System.Int32,Taikandi.Telebot.Types.ChatAction,System.Threading.CancellationToken)">
            <summary>
            Sends a chat action. Use this method when you need to tell the user that something is happening on the bot's side.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="action">
            Type of action to broadcast.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Use this method when you need to tell the user that something is happening on the bot's side. The status is
            set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).
            <example>
            The <c>ImageBot</c> needs some time to process a request and upload the image. Instead of sending a
            text message along the lines of "Retrieving image, please wait…", the bot may use <see cref="M:Taikandi.Telebot.Telebot.SendChatAction(System.Int32,Taikandi.Telebot.Types.ChatAction,System.Threading.CancellationToken)"/>
            with action = upload_photo. The user will see a "sending photo" status for the bot.
            </example>
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendDocumentAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a general file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="documentId">
            A file id as string to resend a file that is already on the Telegram servers.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendDocumentAsync(System.Int32,System.IO.Stream,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a general file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="documentStream">
            A <see cref="T:System.IO.Stream"/> to the document file to send.
            </param>
            <param name="fileName">
            A name for the file to be sent using <paramref name="documentStream"/>.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendDocumentFromFileAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a general file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="filePath">
            Fully qualified path to the file to send.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendLocationAsync(System.Int32,System.Double,System.Double,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a point on the map.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="latitude">
            Latitude of location
            </param>
            <param name="longitude">
            Longitude of location
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendMessageAsync(System.Int32,System.String,System.Boolean,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a text message.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient — <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="text">
            Text of the message to be sent.
            </param>
            <param name="disableWebPagePreview">
            if set to <c>true</c> disables link previews for links in this message.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendMessageAsync(Taikandi.Telebot.Types.Message,System.String,System.Boolean,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a text message and requests to hide the current custom keyboard by default.
            Optionally if the message is a reply, ID of the original message will be sent.
            </summary>
            <param name="message">
            The original received message.
            </param>
            <param name="text">
            Text of the message to be sent.
            </param>
            <param name="disableWebPagePreview">
            if set to <c>true</c> disables link previews for links in this message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard,
            instructions to hide keyboard or to force a reply from the user. Defaults to hide the current custom keyboard.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendPhotoAsync(System.Int32,System.String,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a photo.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="documentId">
            A file id as string to resend a photo that is already on the Telegram servers.
            </param>
            <param name="caption">
            Photo caption (may also be used when resending photos by file id).
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendPhotoAsync(System.Int32,System.IO.Stream,System.String,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a photo.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="photoStream">
            A <see cref="T:System.IO.Stream"/> to the photo to upload.
            </param>
            <param name="fileName">
            A name for the file to be sent using <paramref name="photoStream"/>.
            </param>
            <param name="caption">
            Photo caption (may also be used when resending photos by file id).
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendPhotoFromFileAsync(System.Int32,System.String,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a photo.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="filePath">
            The fully qualified path to the photo to send.
            </param>
            <param name="caption">
            Photo caption (may also be used when resending photos by file id).
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendStickerAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends <c>.webp</c> sticker.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="stickerId">
            A file id as string to resend a sticker that is already on the Telegram servers.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendStickerAsync(System.Int32,System.IO.Stream,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends <c>.webp</c> sticker.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="stickerStream">
            A <see cref="T:System.IO.Stream"/> to the sticker file to send.
            </param>
            <param name="fileName">
            A name for the file to be sent using <paramref name="stickerStream"/>.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendStickerFromFileAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends <c>.webp</c> sticker.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="filePath">
            Fully qualified path to the sticker to send.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendVideoAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a video file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="videoId">
            A file id as string to resend a video that is already on the Telegram servers.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Telegram clients support mp4 videos (other formats may be sent as <see cref="T:Taikandi.Telebot.Types.Document"/>).
            Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendVideoAsync(System.Int32,System.IO.Stream,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a video file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="videoStream">
            A <see cref="T:System.IO.Stream"/> to the video file to send.
            </param>
            <param name="fileName">
            A name for the file to be sent using <paramref name="videoStream"/>.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Telegram clients support mp4 videos (other formats may be sent as <see cref="T:Taikandi.Telebot.Types.Document"/>).
            Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SendVideoFromFileAsync(System.Int32,System.String,System.Int32,Taikandi.Telebot.Types.IReply,System.Threading.CancellationToken)">
            <summary>
            Sends a video file.
            </summary>
            <param name="chatId">
            Unique identifier for the message recipient, <see cref="T:Taikandi.Telebot.Types.User"/> or <see cref="T:Taikandi.Telebot.Types.GroupChat"/> id.
            </param>
            <param name="filePath">
            Fully qualified path to the video file to send.
            </param>
            <param name="replyToMessageId">
            If the message is a reply, ID of the original message.
            </param>
            <param name="replyMarkup">
            Additional interface options. An <see cref="T:Taikandi.Telebot.Types.IReply"/> object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the
            user.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            <returns>
            On success, returns the sent <see cref="T:Taikandi.Telebot.Types.Message"/>.
            </returns>
            <remarks>
            Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
            <remarks>
            Telegram clients support mp4 videos (other formats may be sent as <see cref="T:Taikandi.Telebot.Types.Document"/>).
            Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.SetWebhookAsync(System.String)">
            <summary>
            Use this method to specify a url and receive incoming updates via an outgoing webhook.
            </summary>
            <param name="url">
            HTTPS url to send updates to. Use an empty string to remove webhook integration
            </param>
            <returns>
            Continues task.
            </returns>
            <remarks>
            Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url,
            containing a JSON-serialized <see cref="T:Taikandi.Telebot.Types.Update"/>. In case of an unsuccessful request,
            we will give up after a reasonable amount of attempts.
            <para>
            If you'd like to make sure that the Webhook request comes from Telegram, we recommend using
            a secret path in the URL, e.g. <c>www.example.com/YOUR_TOKEN</c>. Since nobody else knows your
            bot‘s token, you can be pretty sure it’s us.
            </para>
            </remarks>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.CreateHttpClient">
            <summary>
            Creates a new instance of <see cref="T:System.Net.Http.HttpClient" /> to connect to the Telegram bot API.
            </summary>
            <returns>A new instance of <see cref="T:System.Net.Http.HttpClient" /> configured to connect to the Telegram bot API.</returns>
        </member>
        <member name="M:Taikandi.Telebot.Telebot.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Taikandi.Telebot.Converters.JsonCreationConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an instance of objectType, based properties in the JSON object
            </summary>
            <param name="objectType">
            type of object expected
            </param>
            <param name="jsonObject">
            contents of JSON object that will be deserialized
            </param>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="T:Taikandi.Telebot.Types.Audio">
            <summary>
            This object represents an audio file (voice note).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Audio.Duration">
            <summary>
            Gets or sets the duration of the audio in seconds as defined by sender.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Audio.FileId">
            <summary>
            Gets or sets the unique identifier for this file.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Audio.FileSize">
            <summary>
            Gets or sets the file size (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Audio.MimeType">
            <summary>
            Gets or sets the MIME type of the file as defined by sender (Optional).
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Types.ChatAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Taikandi.Telebot.Types.ChatAction"/> class.
            </summary>
            <param name="value">
            The chat action value.
            </param>
        </member>
        <member name="M:Taikandi.Telebot.Types.ChatAction.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">
            The object to compare with the current object.
            </param>
        </member>
        <member name="M:Taikandi.Telebot.Types.ChatAction.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Types.ChatAction.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:Taikandi.Telebot.Types.ChatAction.Equals(Taikandi.Telebot.Types.ChatAction)">
            <summary>
            Determines whether the specified <see cref="T:Taikandi.Telebot.Types.ChatAction"/> is equal to the current <see cref="T:Taikandi.Telebot.Types.ChatAction"/>.
            </summary>
            <returns>
            <c>true</c> if the specified <see cref="T:Taikandi.Telebot.Types.ChatAction"/> is equal to the current instance; otherwise, <c>false</c>.
            </returns>
            <param name="other">
            The <see cref="T:Taikandi.Telebot.Types.ChatAction"/> to compare with the current instance.
            </param>
        </member>
        <member name="T:Taikandi.Telebot.Types.Contact">
            <summary>
            This object represents a phone contact.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Contact.FirstName">
            <summary>
            Gets or sets the contact's first name
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Contact.LastName">
            <summary>
            Gets or sets the contact's last name (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Contact.PhoneNumber">
            <summary>
            Gets or sets the contact's phone number.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Contact.UserId">
            <summary>
            Gets or sets the contact's user identifier in Telegram (Optional).
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.Document">
            <summary>
            This object represents a general file (as opposed to Photos and <see cref="T:Taikandi.Telebot.Types.Audio" />s).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Document.FileId">
            <summary>
            Gets or sets the unique file identifier.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Document.FileName">
            <summary>
            Gets or sets the original filename as defined by sender (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Document.FileSize">
            <summary>
            Gets or sets the file size (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Document.MimeType">
            <summary>
            Gets or sets the MIME type of the file as defined by sender (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Document.Thumb">
            <summary>
            Gets or sets the document thumbnail as defined by sender.
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.ForceReply">
            <summary>
            Upon receiving a message with this object, Telegram clients will display a reply interface
            to the user (act as if the user has selected the bot‘s message and tapped 'Reply').
            This can be extremely useful if you want to create user-friendly step-by-step interfaces
            without having to sacrifice privacy mode.
            <para>More information: https://core.telegram.org/bots/api#forcereply</para>
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ForceReply.ReplyForce">
            <summary>
            Gets or sets a value indicating whether to shows reply interface to the user, as if they manually
            selected the bot's message and tapped 'Reply'.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ForceReply.Selective">
            <summary>
            Gets or sets a value indicating whether you want to force reply from specific users only (Optional).
            </summary>
            <remarks>
            Use this parameter if you want to force reply from specific users only.
            <para>
            Targets: 1) users that are @mentioned in the text of the Message object;
            2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
            </para>
            </remarks>
        </member>
        <member name="T:Taikandi.Telebot.Types.GroupChat">
            <summary>
            This object represents a group chat.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.GroupChat.Id">
            <summary>
            Gets or sets the unique identifier for this group chat.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.GroupChat.Title">
            <summary>
            Gets or sets the group name.
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.Location">
            <summary>
            This object represents a point on the map.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Location.Latitude">
            <summary>
            Gets or sets th latitude as defined by sender
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Location.Longitude">
            <summary>
            Gets or sets the longitude as defined by sender
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.Message">
            <summary>
            This object represents a message.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Audio">
            <summary>
            Gets or sets the information about the file if the message is an audio file (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Chat">
            <summary>
            Gets or sets the conversation the message belongs to. <see cref="T:Taikandi.Telebot.Types.User" /> in case of a private message, <see cref="T:Taikandi.Telebot.Types.GroupChat" /> in case of a group.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Contact">
            <summary>
            Gets or sets the information about the contact if the message is a shared contact (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Date">
            <summary>
            Gets or sets the date the message was sent.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.DeleteChatPhoto">
            <summary>
            Gets or sets a value indicating whether the group photo is deleted.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Document">
            <summary>
            Gets or sets the information about th efile if the message is a general file (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.ForwardDate">
            <summary>
            Gets or sets the date the original message was sent for forwarded messages (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.ForwardFrom">
            <summary>
            Gets or sets the sender of the original message for forwarded messages (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.From">
            <summary>
            Gets or sets the sender.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.GroupChatCreated">
            <summary>
            Gets or sets a value indicating whether the group is created.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.LeftChatParticipant">
            <summary>
            Gets or sets the information about the member (which might be a bo itself) removed from the group (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Location">
            <summary>
            Gets or sets the information about the location if the message is a shared location (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Id">
            <summary>
            Gets or sets the unique message identifier
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.NewChatParticipant">
            <summary>
            Gets or sets the information about the new member (which might be a bo itself) added to the group (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.NewChatPhoto">
            <summary>
            Gets or sets the grouop new photo (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.NewChatTitle">
            <summary>
            Gets or sets the value of the group new title (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Photos">
            <summary>
            Gets or sets the available sizes of the photo if the message is a photo (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.ReplyToMessage">
            <summary>
            Gets or sets the original message for replies.
            <para>
            Note that the Message object in this field
            will not contain further reply_to_message fields even if it itself is a reply.
            </para>
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Sticker">
            <summary>
            Gets or sets the information about the sticker if the message is a sticker (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Text">
            <summary>
            Gets or sets the the actual UTF-8 text of the message for the text messages (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Message.Video">
            <summary>
            Gets or sets the information about the video if message is a video (Optional).
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.PhotoSize">
            <summary>
            This object represents one size of a photo or a <see cref="T:Taikandi.Telebot.Types.Document"/> / <see cref="T:Taikandi.Telebot.Types.Sticker" />thumbnail.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.PhotoSize.FileId">
            <summary>
            Gets or sets the unique identifier for this file
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.PhotoSize.Width">
            <summary>
            Gets or sets the photo width.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.PhotoSize.Height">
            <summary>
            Gets or sets the photo height.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.PhotoSize.FileSize">
            <summary>
            Gets or sets the size of the file (Optional).
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.ReplyKeyboardHide">
            <summary>
            Upon receiving a message with this object, Telegram clients will hide
            the current custom keyboard and display the default letter-keyboard.
            By default, custom keyboards are displayed until a new keyboard is sent by a bot.
            An exception is made for one-time keyboards that are hidden immediately
            after the user presses a button. See also <seealso cref="T:Taikandi.Telebot.Types.ReplyKeyboardMarkup" />.
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Types.ReplyKeyboardHide.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Taikandi.Telebot.Types.ReplyKeyboardHide"/> class.
            </summary>
            <param name="hideKeyboard">
            if set to <c>true</c> requests clients to hide the custom keyboard. Defaults to <c>true</c>.
            </param>
            <param name="selective">
            if set to <c>true</c> hides custom keyboard for specific users only. Defaults to <c>true</c>.
            </param>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardHide.HideKeyboard">
            <summary>
            Gets or sets a value indicating whether to request clients to hide the custom keyboard.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardHide.Selective">
            <summary>
            Gets or sets a value indicating whether you want to hide keyboard for specific users only (Optional).
            <para>
            Use this parameter if you want to hide keyboard for specific users only. Targets:
            1) users that are @mentioned in the text of the Message object;
            2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
            Example: A user votes in a poll, bot returns confirmation message in reply to the vote and hides keyboard for that user,
            while still showing the keyboard with poll options to users who haven't voted yet.
            </para>
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.ReplyKeyboardMarkup">
            <summary>
            This object represents a custom keyboard with reply options.
            See Introduction to bots for details and examples at https://core.telegram.org/bots#keyboards.
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Types.ReplyKeyboardMarkup.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Taikandi.Telebot.Types.ReplyKeyboardMarkup"/> class.
            </summary>
            <param name="oneTimeKeyboard">
            If set to <c>true</c> requests clients to hide the keyboard as soon as it's been used. Defaults to <c>false</c>.
            </param>
            <param name="selective">
            If set to <c>true</c> hides custom keyboard for specific users only. Defaults to <c>true</c>.
            </param>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardMarkup.Keyboard">
            <summary>
            Gets or sets an array of button rows, each represented by an array of strings
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardMarkup.OneTimeKeyboard">
            <summary>
            Gets or sets a value indicating whether to requests clients to hide the keyboard
            as soon as it's been used. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardMarkup.ResizeKeyboard">
            <summary>
            Gets or sets a value indicating whether to Requests clients to resize the
            keyboard vertically for optimal fit (e.g., make the keyboard smaller if
            there are just two rows of buttons).
            Defaults to <c>false</c>, in which case the custom keyboard is always of
            the same height as the app's standard keyboard.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.ReplyKeyboardMarkup.Selective">
            <summary>
            Gets or sets a value indicating whether you want to show the keyboard to specific users only.
            <para>
            Targets: 1) users that are @mentioned in the text of the Message object;
            2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
            Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to
            select the new language. Other users in the group don’t see the keyboard.
            </para>
            </summary>
        </member>
        <member name="M:Taikandi.Telebot.Types.ReplyKeyboardMarkup.CreateReplyKeyboardMarkup(System.Collections.Generic.ICollection{System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:Taikandi.Telebot.Types.ReplyKeyboardMarkup"/> filled with the specified <paramref name="keyboardTitles"/>.
            </summary>
            <param name="keyboardTitles">
            The titles of each keyboard button.
            </param>
            <param name="oneTimeKeyboard">
            If set to <c>true</c> requests clients to hide the keyboard as soon as it's been used. Defaults to <c>true</c>.
            </param>
            <param name="selective">
            If set to <c>true</c> hides custom keyboard for specific users only. Defaults to <c>true</c>.
            </param>
            <returns>
            A <see cref="T:Taikandi.Telebot.Types.ReplyKeyboardMarkup"/> filled with the specified <paramref name="keyboardTitles"/>.
            </returns>
        </member>
        <member name="T:Taikandi.Telebot.Types.Sticker">
            <summary>
            This object represents a sticker.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Sticker.FileId">
            <summary>
            Gets or sets the unique identifier for this file.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Sticker.FileSize">
            <summary>
            Gets or sets the file size (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Sticker.Height">
            <summary>
            Gets or sets the sticker height.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Sticker.Thumb">
            <summary>
            Gets or sets the sticker thumbnail in .webp or .jpg format.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Sticker.Width">
            <summary>
            Gets or sets the sticker width.
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.Update">
            <summary>
            This object represents an incoming update.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Update.Id">
            <summary>
            Gets or sets the update‘s unique identifier. 
            <para>
            Update identifiers start from a certain positive number and increase sequentially. 
            This ID becomes especially handy if you’re using Webhooks, since it allows you to 
            ignore repeated updates or to restore the correct update sequence, should they get out of order.
            </para>
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.User">
            <summary>
            This object represents a Telegram user or bot.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.User.Id">
            <summary>
            Gets or sets the unique identifier for this user or bot.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.User.FirstName">
            <summary>
            Gets or sets the User‘s or bot’s first name.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.User.LastName">
            <summary>
            Gets or sets the User‘s or bot’s last name (optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.User.Username">
            <summary>
            Gets or sets user‘s or bot’s username (optional).
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.UserProfilePhotos">
            <summary>
            This object represent a user's profile pictures.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.UserProfilePhotos.Photos">
            <summary>
            Gets or sets the requested profile pictures (in up to 4 sizes each).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.UserProfilePhotos.TotalCount">
            <summary>
            Gets or sets the total number of profile pictures the target user has.
            </summary>
        </member>
        <member name="T:Taikandi.Telebot.Types.Video">
            <summary>
            This object represents a video file.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.Caption">
            <summary>
            Gets or sets the text description of the video (usually empty).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.Duration">
            <summary>
            Gets or sets the duration of the video in seconds as defined by sender.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.FileId">
            <summary>
            Gets or sets the unique identifier for this file.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.FileSize">
            <summary>
            Gets or sets the file size (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.Height">
            <summary>
            Gets or sets the video height as defined by sender.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.MimeType">
            <summary>
            Gets or sets the MIME type of the file as defined by sender (Optional).
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.Thumb">
            <summary>
            Gets or sets the video thumbnail.
            </summary>
        </member>
        <member name="P:Taikandi.Telebot.Types.Video.Width">
            <summary>
            Gets or sets the video width as defined by sender.
            </summary>
        </member>
    </members>
</doc>
